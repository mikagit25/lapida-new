# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Lapida –Ω–∞ VPS/VDS
# PowerShell –≤–µ—Ä—Å–∏—è –¥–ª—è Windows —Å–µ—Ä–≤–µ—Ä–æ–≤

Write-Host "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Lapida –Ω–∞ Windows VPS..." -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Cyan

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
function Test-Command {
    param($Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        Write-Host "‚úÖ $Command –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå $Command –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Yellow

if (!(Test-Command node)) {
    Write-Host "üì¶ –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å https://nodejs.org/" -ForegroundColor Yellow
    Write-Host "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç" -ForegroundColor Yellow
    exit 1
}

if (!(Test-Command npm)) {
    Write-Host "‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    exit 1
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
Write-Host "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:" -ForegroundColor Cyan
Write-Host "Node.js: $(node --version)" -ForegroundColor White
Write-Host "npm: $(npm --version)" -ForegroundColor White

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
$ProjectDir = $PSScriptRoot
Set-Location $ProjectDir
Write-Host "üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: $ProjectDir" -ForegroundColor White

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Yellow
$RequiredFiles = @("app.js", "package.json")
foreach ($file in $RequiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        exit 1
    }
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..." -ForegroundColor Yellow
Get-Process | Where-Object {$_.ProcessName -eq "node" -and $_.MainModule.FileName -like "*app.js*"} | Stop-Process -Force -ErrorAction SilentlyContinue

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π npm..." -ForegroundColor Yellow
npm install

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" -ForegroundColor Red
    Write-Host "–ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..." -ForegroundColor Yellow
    Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue
    Remove-Item package-lock.json -ErrorAction SilentlyContinue
    npm cache clean --force
    npm install --no-optional --production
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞
Write-Host "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞..." -ForegroundColor Yellow
$bytes = New-Object byte[] 32
[System.Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($bytes)
$JwtSecret = [Convert]::ToBase64String($bytes)

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
Write-Host "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Yellow
$EnvContent = @"
NODE_ENV=production
PORT=3000
MONGODB_URI=mongodb://localhost:27017/lapida_db
JWT_SECRET=$JwtSecret
"@

Set-Content -Path ".env" -Value $EnvContent
Write-Host "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫..." -ForegroundColor Yellow
$Folders = @("upload", "upload/memorials", "upload/gallery", "upload/users", "upload/timeline", "upload/misc", "logs")
foreach ($folder in $Folders) {
    if (!(Test-Path $folder)) {
        New-Item -ItemType Directory -Path $folder -Force | Out-Null
        Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $folder" -ForegroundColor Green
    }
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
Write-Host "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..." -ForegroundColor Yellow
if (!(Test-Command pm2)) {
    npm install -g pm2
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PM2
$PM2Config = @"
module.exports = {
  apps: [{
    name: 'lapida',
    script: './app.js',
    instances: 1,
    exec_mode: 'fork',
    env: {
      NODE_ENV: 'production',
      PORT: 3000
    },
    error_file: './logs/err.log',
    out_file: './logs/out.log',
    log_file: './logs/combined.log',
    time: true
  }]
};
"@

Set-Content -Path "ecosystem.config.js" -Value $PM2Config

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-Host "üöÄ –ó–∞–ø—É—Å–∫ Lapida..." -ForegroundColor Green
pm2 start ecosystem.config.js
pm2 save

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
Write-Host "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..." -ForegroundColor Yellow
Start-Sleep 3
pm2 status

Write-Host ""
Write-Host "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:" -ForegroundColor Cyan
Write-Host "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: lapida" -ForegroundColor White
Write-Host "‚Ä¢ –ü–æ—Ä—Ç: 3000" -ForegroundColor White
Write-Host "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ecosystem.config.js" -ForegroundColor White
Write-Host "‚Ä¢ –õ–æ–≥–∏: ./logs/" -ForegroundColor White
Write-Host ""
Write-Host "üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" -ForegroundColor Cyan
Write-Host "‚Ä¢ pm2 status          - —Å—Ç–∞—Ç—É—Å" -ForegroundColor White
Write-Host "‚Ä¢ pm2 logs lapida     - –ª–æ–≥–∏" -ForegroundColor White
Write-Host "‚Ä¢ pm2 restart lapida  - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫" -ForegroundColor White
Write-Host "‚Ä¢ pm2 stop lapida     - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞" -ForegroundColor White
