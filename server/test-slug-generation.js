const mongoose = require('mongoose');
const Memorial = require('./models/Memorial');
require('dotenv').config();

const testMemorialCreation = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/lapida');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–æ—Ä–∏–∞–ª–∞
    const testCases = [
      { firstName: '–ò–≤–∞–Ω', lastName: '–ü–µ—Ç—Ä–æ–≤' },
      { firstName: 'John', lastName: 'Smith' },
      { firstName: '–ú–∞—Ä–∏—è', lastName: '–°–∏–¥–æ—Ä–æ–≤–∞' },
      { firstName: 'Test', lastName: 'User' }
    ];

    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é customSlug...\n');

    for (const testCase of testCases) {
      console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.firstName} ${testCase.lastName}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–º–æ—Ä–∏–∞–ª –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      const memorial = new Memorial({
        firstName: testCase.firstName,
        lastName: testCase.lastName,
        birthDate: new Date('1980-01-01'),
        deathDate: new Date('2020-01-01'),
        createdBy: new mongoose.Types.ObjectId(),
        location: {
          cemetery: '–¢–µ—Å—Ç–æ–≤–æ–µ –∫–ª–∞–¥–±–∏—â–µ'
        }
      });

      // –í—ã–∑—ã–≤–∞–µ–º pre-save —Ö—É–∫ –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
      await memorial.validate();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–º–æ—Ä–∏–∞–ª–∞
      memorial.isNew = true;
      memorial.customSlug = null;
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ pre-save hook
      // –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const generateCustomSlug = async function() {
        // –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
        const transliterate = (text) => {
          const cyrillicToLatin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            ' ': '-'
          };
          
          return text
            .toLowerCase()
            .split('')
            .map(char => cyrillicToLatin[char] || char)
            .join('')
            .replace(/[^\w\s-]/g, '') // —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            .replace(/\s+/g, '-') // –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
            .replace(/-+/g, '-') // —É–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
            .replace(/^-+|-+$/g, ''); // —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        };

        const baseSlug = transliterate(`${this.firstName} ${this.lastName}`);
        
        // –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º shareUrl
        if (!baseSlug || baseSlug === '-' || baseSlug === '') {
          this.customSlug = this.shareUrl || `memorial-${Date.now()}`;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug'–∞
          let slug = baseSlug;
          let counter = 1;
          
          while (await Memorial.findOne({ customSlug: slug })) {
            slug = `${baseSlug}-${counter}`;
            counter++;
          }
          
          this.customSlug = slug;
        }
      };

      await generateCustomSlug.call(memorial);
      
      console.log(`  ‚ûú –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π customSlug: "${memorial.customSlug}"`);
      console.log(`  ‚ûú URL –±—É–¥–µ—Ç: localhost:5183/${memorial.customSlug}`);
      console.log(`  ‚ûú –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: lapida.one/${memorial.customSlug}`);
      console.log('');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

testMemorialCreation();
