const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const { auth } = require('../middleware/auth');

// –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const VirtualItem = require('../models/VirtualItem');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–≤–µ—Ç—ã –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞
router.get('/flowers/:memorialId', async (req, res) => {
  try {
    const { memorialId } = req.params;
    
    const flowers = await VirtualItem.find({
      memorialId,
      type: 'flower'
    }).sort({ createdAt: -1 });
    
    res.json({ flowers });
  } catch (error) {
    console.error('Error fetching flowers:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫
router.post('/flowers', auth, async (req, res) => {
  try {
    const { memorialId, type, icon, name, color, comment, duration } = req.body;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authorName = req.user.name || req.user.email || '–ê–Ω–æ–Ω–∏–º';
    
    const flower = new VirtualItem({
      memorialId,
      type: 'flower',
      itemType: type,
      icon,
      name,
      color,
      comment,
      authorName,
      authorId: req.user.id,
      duration: duration || 7 * 24 * 60 * 60 * 1000, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
      createdAt: new Date()
    });
    
    await flower.save();
    
    res.status(201).json({ flower });
  } catch (error) {
    console.error('Error adding flower:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞
router.get('/candles/:memorialId', async (req, res) => {
  try {
    const { memorialId } = req.params;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ ObjectId –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ MongoDB
    const objectId = mongoose.Types.ObjectId.isValid(memorialId) 
      ? new mongoose.Types.ObjectId(memorialId) 
      : memorialId;

    const candles = await VirtualItem.find({
      memorialId: objectId,
      type: 'candle'
    }).sort({ createdAt: -1 });
    
    res.json({ candles });
  } catch (error) {
    console.error('Error fetching candles:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Å–≤–µ—á—É
router.post('/candles', auth, async (req, res) => {
  try {
    console.log('üïØÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–µ—á–∏ - –Ω–∞—á–∞–ª–æ');
    console.log('Body:', req.body);
    console.log('User:', req.user);
    
    const { memorialId, type, icon, name, color, comment, duration } = req.body;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authorName = req.user.name || req.user.email || '–ê–Ω–æ–Ω–∏–º';
    
    const candle = new VirtualItem({
      memorialId,
      type: 'candle',
      itemType: type,
      icon,
      name,
      color,
      comment,
      authorName,
      authorId: req.user.id,
      duration: duration || 24 * 60 * 60 * 1000, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
      createdAt: new Date()
    });

    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤–µ—á—É:', candle);
    await candle.save();
    console.log('üïØÔ∏è –°–≤–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', candle._id);
    
    res.status(201).json({ candle });
  } catch (error) {
    console.error('‚ùå Error adding candle:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–µ—á–∏' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–µ–º–æ—Ä–∏–∞–ª–∞)
router.delete('/:itemId', auth, async (req, res) => {
  try {
    const { itemId } = req.params;
    
    const item = await VirtualItem.findById(itemId);
    if (!item) {
      return res.status(404).json({ message: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if (item.authorId !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ' });
    }
    
    await VirtualItem.findByIdAndDelete(itemId);
    
    res.json({ message: '–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting virtual item:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞' });
  }
});

module.exports = router;
