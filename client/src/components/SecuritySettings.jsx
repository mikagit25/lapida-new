import React, { useState, useEffect } from 'react';
import { userService } from '../services/api';
import { useAuth } from '../context/AuthContext';

const SecuritySettings = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [activeTab, setActiveTab] = useState('password');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è 2FA
  const [twoFactorAuth, setTwoFactorAuth] = useState({
    enabled: false,
    secret: '',
    qrCode: ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–π
  const [sessions, setSessions] = useState([]);
  const [loadingSessions, setLoadingSessions] = useState(false);

  useEffect(() => {
    if (activeTab === 'sessions') {
      loadSessions();
    }
  }, [activeTab]);

  const loadSessions = async () => {
    try {
      setLoadingSessions(true);
      const response = await userService.getSessions();
      setSessions(response.data || []);
    } catch (error) {
      console.error('Error loading sessions:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π');
    } finally {
      setLoadingSessions(false);
    }
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setError('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (passwordData.newPassword.length < 6) {
      setError('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      await userService.updatePassword({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword
      });
      
      setSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error updating password:', error);
      setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
    } finally {
      setLoading(false);
    }
  };

  const handleToggle2FA = async () => {
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      if (!twoFactorAuth.enabled) {
        // –í–∫–ª—é—á–∞–µ–º 2FA - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç
        const response = await userService.generate2FASecret();
        setTwoFactorAuth({
          enabled: false,
          secret: response.data.secret,
          qrCode: response.data.qrCode
        });
      } else {
        // –û—Ç–∫–ª—é—á–∞–µ–º 2FA
        await userService.toggle2FA(false);
        setTwoFactorAuth({
          enabled: false,
          secret: '',
          qrCode: ''
        });
        setSuccess('–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
    } catch (error) {
      console.error('Error toggling 2FA:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ 2FA');
    } finally {
      setLoading(false);
    }
  };

  const confirm2FA = async (code) => {
    setLoading(true);
    setError('');
    
    try {
      await userService.toggle2FA(true, twoFactorAuth.secret, code);
      setTwoFactorAuth(prev => ({ ...prev, enabled: true }));
      setSuccess('–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
      console.error('Error confirming 2FA:', error);
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const terminateSession = async (sessionId) => {
    try {
      await userService.terminateSession(sessionId);
      setSessions(prev => prev.filter(session => session.id !== sessionId));
      setSuccess('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('Error terminating session:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
    }
  };

  const terminateAllSessions = async () => {
    try {
      await userService.terminateAllSessions();
      await loadSessions();
      setSuccess('–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error) {
      console.error('Error terminating all sessions:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π');
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getDeviceIcon = (userAgent) => {
    if (userAgent.includes('Mobile')) {
      return 'üì±';
    } else if (userAgent.includes('Tablet')) {
      return 'üì±';
    } else {
      return 'üíª';
    }
  };

  return (
    <div className="bg-white shadow rounded-lg">
      <div className="px-6 py-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-900">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h2>
        <p className="text-sm text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
      <div className="px-6 py-4 border-b border-gray-200">
        <nav className="flex space-x-8">
          <button
            onClick={() => setActiveTab('password')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'password'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
          </button>
          <button
            onClick={() => setActiveTab('2fa')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === '2fa'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
          </button>
          <button
            onClick={() => setActiveTab('sessions')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'sessions'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
          </button>
        </nav>
      </div>

      <div className="px-6 py-6">
        {error && (
          <div className="mb-4 bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-700">{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 bg-green-50 border border-green-200 rounded-lg p-4">
            <p className="text-green-700">{success}</p>
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */}
        {activeTab === 'password' && (
          <form onSubmit={handlePasswordChange} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={passwordData.currentPassword}
                onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={passwordData.newPassword}
                onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                minLength="6"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={passwordData.confirmPassword}
                onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
            </button>
          </form>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ 2FA */}
        {activeTab === '2fa' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
              <div>
                <h3 className="text-lg font-medium text-gray-900">
                  –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                </h3>
                <p className="text-sm text-gray-600">
                  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                </p>
              </div>
              <button
                onClick={handleToggle2FA}
                disabled={loading}
                className={`px-4 py-2 rounded-md font-medium transition-colors ${
                  twoFactorAuth.enabled
                    ? 'bg-red-600 text-white hover:bg-red-700'
                    : 'bg-green-600 text-white hover:bg-green-700'
                } disabled:opacity-50 disabled:cursor-not-allowed`}
              >
                {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : twoFactorAuth.enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
              </button>
            </div>

            {twoFactorAuth.secret && !twoFactorAuth.enabled && (
              <div className="p-4 border border-gray-200 rounded-lg">
                <h4 className="text-md font-medium text-gray-900 mb-4">
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                </h4>
                
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-gray-600 mb-2">
                      1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Authenticator –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ
                    </p>
                    <p className="text-sm text-gray-600 mb-2">
                      2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤—Ä—É—á–Ω—É—é
                    </p>
                    <p className="text-sm text-gray-600 mb-4">
                      3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    </p>
                  </div>

                  {twoFactorAuth.qrCode && (
                    <div className="text-center">
                      <img 
                        src={fixImageUrl(twoFactorAuth.qrCode)} 
                        alt="QR Code for 2FA" 
                        className="mx-auto border border-gray-300 rounded"
                      />
                    </div>
                  )}

                  <div>
                    <p className="text-sm font-medium text-gray-700 mb-2">
                      –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:
                    </p>
                    <p className="text-sm font-mono bg-gray-100 p-2 rounded break-all">
                      {twoFactorAuth.secret}
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    </label>
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        maxLength="6"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter' && e.target.value.length === 6) {
                            confirm2FA(e.target.value);
                          }
                        }}
                      />
                      <button
                        onClick={(e) => {
                          const code = e.target.previousElementSibling.value;
                          if (code.length === 6) {
                            confirm2FA(code);
                          }
                        }}
                        disabled={loading}
                        className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                      >
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π */}
        {activeTab === 'sessions' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">
                –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
              </h3>
              <button
                onClick={terminateAllSessions}
                className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors"
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
              </button>
            </div>

            {loadingSessions ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p className="text-gray-600 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...</p>
              </div>
            ) : sessions.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</p>
              </div>
            ) : (
              <div className="space-y-4">
                {sessions.map((session) => (
                  <div
                    key={session.id}
                    className="flex items-center justify-between p-4 border border-gray-200 rounded-lg"
                  >
                    <div className="flex items-center space-x-4">
                      <span className="text-2xl">
                        {getDeviceIcon(session.userAgent)}
                      </span>
                      <div>
                        <p className="font-medium text-gray-900">
                          {session.browser} –Ω–∞ {session.os}
                        </p>
                        <p className="text-sm text-gray-600">
                          IP: {session.ip}
                        </p>
                        <p className="text-sm text-gray-600">
                          –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatDate(session.lastActivity)}
                        </p>
                        {session.current && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
                          </span>
                        )}
                      </div>
                    </div>
                    
                    {!session.current && (
                      <button
                        onClick={() => terminateSession(session.id)}
                        className="text-red-600 hover:text-red-800 text-sm font-medium"
                      >
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default SecuritySettings;