import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { API_BASE_URL } from '../config/api';

const BackgroundImageManager = ({ 
  memorial,
  onUpdate,
  canEdit = false 
}) => {
  const { user } = useAuth();
  const [isUploading, setIsUploading] = useState(false);

  const getPageBackgroundUrl = () => {
    if (!memorial?.pageBackground) {
      return null;
    }
    
    if (memorial.pageBackground.startsWith('http')) {
      return memorial.pageBackground;
    }
    
    const fullUrl = `${API_BASE_URL}${memorial.pageBackground}`;
    return fullUrl;
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
      return;
    }

    setIsUploading(true);
    
    try {
      const formData = new FormData();
      formData.append('pageBackground', file);
      
      const response = await fetch(`${API_BASE_URL}/api/memorials/${memorial._id}/page-background`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token') || localStorage.getItem('authToken')}`
        },
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }

      const data = await response.json();
      
      console.log('üé® Upload response:', data);
      console.log('üé® Before update - memorial.pageBackground:', memorial?.pageBackground);
      
      if (onUpdate) {
        onUpdate(prev => {
          console.log('üé® Updating memorial state with:', data.pageBackground);
          const updated = {
            ...prev,
            pageBackground: data.pageBackground
          };
          console.log('üé® Updated memorial:', updated);
          return updated;
        });
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
      setTimeout(() => {
        window.location.reload();
      }, 1000);
      
      alert('–§–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
    } finally {
      setIsUploading(false);
      event.target.value = '';
    }
  };

  const removeBackground = async () => {
    if (!memorial._id) return;
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã?')) {
      return;
    }
    
    try {
      setIsUploading(true);
      
      const response = await fetch(`${API_BASE_URL}/api/memorials/${memorial._id}/page-background`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token') || localStorage.getItem('authToken')}`
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      }

      if (onUpdate) {
        onUpdate(prev => ({
          ...prev,
          pageBackground: null
        }));
      }
      
      alert('–§–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω!');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞: ' + error.message);
    } finally {
      setIsUploading(false);
    }
  };

  const pageBackgroundUrl = getPageBackgroundUrl();

  return (
    <div className="background-image-manager">
      {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      {pageBackgroundUrl && (
        <>
          <div 
            className="fixed inset-0 bg-cover bg-center bg-no-repeat pointer-events-none"
            style={{ 
              backgroundImage: `url(${pageBackgroundUrl})`,
              zIndex: -1
            }}
          />
          {/* Subtle overlay for better content readability */}
          <div 
            className="fixed inset-0 bg-white bg-opacity-20 pointer-events-none"
            style={{ zIndex: 0 }}
          />
        </>
      )}

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) */}
      {canEdit && (
        <div className="fixed top-4 right-4 z-50 bg-white rounded-lg shadow-lg p-3 flex flex-col space-y-2">
          <div className="text-sm font-medium text-gray-700">–§–æ–Ω –º–µ–º–æ—Ä–∏–∞–ª–∞</div>
          
          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞ */}
          <label className="cursor-pointer">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              disabled={isUploading}
              className="hidden"
            />
            <div className="flex items-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition-colors">
              {isUploading ? (
                <>
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>
                  <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </>
              ) : (
                <>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω</span>
                </>
              )}
            </div>
          </label>

          {/* –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
          {pageBackgroundUrl && (
            <button
              onClick={removeBackground}
              disabled={isUploading}
              className="flex items-center space-x-2 px-3 py-2 bg-red-500 text-white rounded text-sm hover:bg-red-600 transition-colors disabled:opacity-50"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
              <span>–£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω</span>
            </button>
          )}

          {/* –ü—Ä–µ–≤—å—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ–Ω–∞ */}
          {pageBackgroundUrl && (
            <div className="mt-2">
              <div className="text-xs text-gray-500 mb-1">–¢–µ–∫—É—â–∏–π —Ñ–æ–Ω:</div>
              <div 
                className="w-16 h-12 bg-cover bg-center rounded border border-gray-200"
                style={{ backgroundImage: `url(${pageBackgroundUrl})` }}
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default BackgroundImageManager;
