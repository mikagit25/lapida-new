import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { timelineService } from '../services/api';
import TimelineEvent from './TimelineEvent';
import EventModal from './EventModal';
import TimelineStats from './TimelineStats';

const LifeTimeline = ({ memorialId }) => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [filter, setFilter] = useState('all');
  const [selectedYear, setSelectedYear] = useState('all');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);
  const [stats, setStats] = useState(null);
  const { user, isAuthenticated } = useAuth();

  // –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
  const eventTypes = [
    { value: 'birth', label: '–†–æ–∂–¥–µ–Ω–∏–µ', icon: 'üë∂' },
    { value: 'education', label: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üéì' },
    { value: 'career', label: '–ö–∞—Ä—å–µ—Ä–∞', icon: 'üíº' },
    { value: 'family', label: '–°–µ–º—å—è', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
    { value: 'achievement', label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', icon: 'üèÜ' },
    { value: 'travel', label: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { value: 'health', label: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üè•' },
    { value: 'hobby', label: '–£–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üé®' },
    { value: 'life', label: '–ñ–∏–∑–Ω—å', icon: 'üåü' },
    { value: 'other', label: '–î—Ä—É–≥–æ–µ', icon: 'üìÖ' }
  ];

  useEffect(() => {
    loadEvents();
    loadStats();
  }, [memorialId, filter, selectedYear]);

  const loadEvents = async () => {
    try {
      setLoading(true);
      const params = {
        ...(filter !== 'all' && { eventType: filter }),
        ...(selectedYear !== 'all' && { year: selectedYear })
      };

      const data = await timelineService.getByMemorial(memorialId, params);
      setEvents(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π');
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
      const response = await fetch(`http://localhost:5002/api/timeline/timeline/stats?memorialId=${memorialId}`);
      if (response.ok) {
        const data = await response.json();
        setStats(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  const getEventIcon = (eventType) => {
    const type = eventTypes.find(t => t.value === eventType);
    return type?.icon || 'üìÖ';
  };

  const getEventTypeLabel = (eventType) => {
    const type = eventTypes.find(t => t.value === eventType);
    return type?.label || eventType;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getAvailableYears = () => {
    const years = [...new Set(events.map(event => 
      new Date(event.date).getFullYear()
    ))].sort((a, b) => b - a);
    return years;
  };

  const handleEventSave = async () => {
    setShowAddForm(false);
    setEditingEvent(null);
    await loadEvents();
    await loadStats();
  };

  const handleDeleteEvent = async (eventId) => {
    try {
      await timelineService.delete(eventId);
      await loadEvents();
      await loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <div className="text-red-500 text-lg mb-2">‚ùå {error}</div>
        <button
          onClick={loadEvents}
          className="text-blue-500 hover:text-blue-700"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">
          üìÖ –õ–µ–Ω—Ç–∞ –∂–∏–∑–Ω–∏
        </h2>
        {isAuthenticated && (
          <button
            onClick={() => setShowAddForm(true)}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 flex items-center space-x-2"
          >
            <span>+</span>
            <span>–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</span>
          </button>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <TimelineStats 
        stats={stats} 
        getEventTypeLabel={getEventTypeLabel}
        eventTypes={eventTypes}
      />

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
        <div className="flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4">
          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É */}
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            </label>
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">–í—Å–µ —Å–æ–±—ã—Ç–∏—è</option>
              {eventTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.icon} {type.label}
                </option>
              ))}
            </select>
          </div>

          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ì–æ–¥
            </label>
            <select
              value={selectedYear}
              onChange={(e) => setSelectedYear(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">–í—Å–µ –≥–æ–¥—ã</option>
              {getAvailableYears().map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* –°–æ–±—ã—Ç–∏—è */}
      {events.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-gray-400 text-6xl mb-4">üìÖ</div>
          <p className="text-gray-500 text-lg mb-2">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π</p>
          <p className="text-gray-400 text-sm">
            {filter === 'all' 
              ? '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∂–∏–∑–Ω–∏' 
              : `–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${getEventTypeLabel(filter)}"`
            }
          </p>
          {isAuthenticated && (
            <button
              onClick={() => setShowAddForm(true)}
              className="mt-4 bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
            >
              –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
            </button>
          )}
        </div>
      ) : (
        <div className="relative">
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è */}
          <div className="absolute left-6 top-0 bottom-0 w-0.5 bg-gray-300"></div>

          <div className="space-y-8">
            {events.map((event, index) => (
              <TimelineEvent
                key={event._id}
                event={event}
                index={index}
                memorialId={memorialId}
                getEventIcon={getEventIcon}
                getEventTypeLabel={getEventTypeLabel}
                formatDate={formatDate}
                isAuthenticated={isAuthenticated}
                user={user}
                onEdit={setEditingEvent}
                onDelete={() => {
                  if (window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) {
                    handleDeleteEvent(event._id);
                  }
                }}
              />
            ))}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showAddForm && (
        <EventModal
          memorialId={memorialId}
          onClose={() => setShowAddForm(false)}
          onSave={handleEventSave}
          eventTypes={eventTypes}
        />
      )}

      {editingEvent && (
        <EventModal
          memorialId={memorialId}
          event={editingEvent}
          onClose={() => setEditingEvent(null)}
          onSave={handleEventSave}
          eventTypes={eventTypes}
          isEditing={true}
        />
      )}
    </div>
  );
};

export default LifeTimeline;