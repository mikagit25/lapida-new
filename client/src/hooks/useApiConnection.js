import { useState, useEffect } from 'react';
import { API_BASE_URL, findWorkingApiUrl } from '../config/api-universal';

/**
 * –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É API —Å–µ—Ä–≤–µ—Ä—É
 */
export function useApiConnection() {
    const [apiUrl, setApiUrl] = useState(API_BASE_URL);
    const [isConnected, setIsConnected] = useState(false);
    const [isSearching, setIsSearching] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        let mounted = true;

        async function findAndTestApi() {
            console.log('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...');
            setIsSearching(true);
            setError(null);

            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π URL
                const testResponse = await fetch(`${API_BASE_URL}/api/health`, {
                    method: 'GET',
                    timeout: 3000
                });

                if (testResponse.ok && mounted) {
                    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π API URL —Ä–∞–±–æ—Ç–∞–µ—Ç:', API_BASE_URL);
                    setApiUrl(API_BASE_URL);
                    setIsConnected(true);
                    setIsSearching(false);
                    return;
                }
            } catch (error) {
                console.log('‚ùå –ë–∞–∑–æ–≤—ã–π API URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...');
            }

            try {
                // –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                const workingUrl = await findWorkingApiUrl();
                
                if (mounted) {
                    if (workingUrl !== API_BASE_URL) {
                        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–π API:', workingUrl);
                        setApiUrl(workingUrl);
                    }
                    setIsConnected(true);
                    setIsSearching(false);
                }
            } catch (error) {
                if (mounted) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π API —Å–µ—Ä–≤–µ—Ä:', error);
                    setError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ backend.');
                    setIsConnected(false);
                    setIsSearching(false);
                }
            }
        }

        findAndTestApi();

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const interval = setInterval(async () => {
            if (!mounted) return;

            try {
                const response = await fetch(`${apiUrl}/api/health`, {
                    method: 'GET',
                    timeout: 5000
                });

                if (response.ok) {
                    if (!isConnected) {
                        setIsConnected(true);
                        setError(null);
                        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    }
                } else {
                    throw new Error('Health check failed');
                }
            } catch (error) {
                if (isConnected) {
                    setIsConnected(false);
                    setError('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                    console.log('‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API');
                }
            }
        }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        return () => {
            mounted = false;
            clearInterval(interval);
        };
    }, [apiUrl, isConnected]);

    return {
        apiUrl,
        isConnected,
        isSearching,
        error,
        retryConnection: () => {
            setIsSearching(true);
            setError(null);
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ useEffect
            setApiUrl(API_BASE_URL);
        }
    };
}

export default useApiConnection;
